"""
Module demonstrating immutable functions on nested lists.

All of these functions make use of accumulators that make new lists.

Author: Isabella White
Date: 11/25/22
"""


def row_sums(table):
    """
    Returns a list that is the sum of each row in a table.
    
    This function assumes that table has no header, so each row has only numbers in it.
    
    Examples: 
        row_sums([[0.1,0.3,0.5],[0.6,0.2,0.7],[0.5,1.1,0.1]]) returns [0.8, 1.5, 1.7]
        row_sums([[0.2,0.1],[-0.2,0.1],[0.2,-0.1],[-0.2,-0.1]]) returns [0.3, -0.1, 0.1, -0.3]
    
    Parameter table: the nested list to process
    Precondition: table is a table of numbers.  In other words, 
        (1) table is a nested 2D list in row-major order, 
        (2) each row contains only numbers, and 
        (3) each row is the same length.
    """
        # list to store sums
    output = []

    # go through each row in square
    for row in table:

        # variable to store row total
        total = 0

        # go through each item in row and add to total
        for item in row:
            total += item

        # append the row's total to the output list
        output.append(total)

    # return the output list
    return output
    pass


def crossout(table,row,col):
    """
    Returns a copy of the table, missing the given row and column.
      
    Examples:
        crossout([[1,3,5],[6,2,7],[5,8,4]],1,2) returns [[1,3],[5,8]]
        crossout([[1,3,5],[6,2,7],[5,8,4]],0,0) returns [[2,7],[8,4]]
        crossout([[1,3],[6,2]],0,0) returns [[2]]
        crossout([[6]],0,0) returns []
    
    Parameter table: the nested list to process
    Precondition: table is a table of numbers.  In other words, 
        (1) table is a nested 2D list in row-major order, 
        (2) each row contains only numbers, and 
        (3) each row is the same length.
    
    Parameter row: the row to remove
    Precondition: row is an index (int) for a row of table
    
    Parameter col: the colummn to remove
    Precondition: col is an index (int) for a column of table
    """
    acc1 = [] 
    for i in range(len(table)): 
        if i != row: 
            acc2 = [] 
            for j in range(len(table[0])):
                if j != col: 
                    acc2.append(table[i][j]) 
            acc1.append(acc2) 
    return acc1 
    pass

-----------------------

"""
Module demonstrating mutable functions on nested lists.

All of these functions modify their list arguments.

Author: Isabella White
Date: 11/25/22
"""


def crossout(table,row,col):
    """
    Modifies the table to remove the given row and column.
    
    Examples:
        If a = [[1,3,5],[6,2,7],[5,8,4]], crossout(a,1,2) changes a to [[1,3],[5,8]]
        If a = [[1,3,5],[6,2,7],[5,8,4]], crossout(a,0,0) changes a to [[2,7],[8,4]]
        If a = [[1,3],[6,2]], crossout(a,0,0) changes a to [[2]]
        If a = [[6]], crossout(a,0,0) changes a to []
    
    Parameter table: the nested list to modify
    Precondition: table is a table of numbers.  In other words, 
        (1) table is a nested 2D list in row-major order, 
        (2) each row contains only numbers, and 
        (3) each row is the same length.
    
    Parameter row: the row to remove
    Precondition: row is an index (int) for a row of table
    
    Parameter col: the colummn to remove
    Precondition: col is an index (int) for a column of table
    """
    table.pop(row)
    for x in table:
        x.pop(col)
    pass


def place_sums(table):
    """
    Modifies the table to add a column summing the previous elements in the row.
    
    This function assumes that the table has a header, which means the first row
    only has strings in it.  The later rows are only numbers.  This function
    adds the string 'Sum' to the first row.  For each later row, it appends the
    sum of that row.
    
    Example: Suppose that a is
        
        [['First','Second','Third'], [0.1,0.3,0.5], [0.6,0.2,0.7], [0.5,1.1,0.1]]
    
    then place_sums(a) modifies the table a so that it is now
        
        [['First', 'Second', 'Third', 'Sum'],
         [0.1, 0.3, 0.5, 0.8], [0.6, 0.2, 0.7, 1.5], [0.5, 1.1, 0.1, 1.7]]
    
    Parameter table: the nested list to process
    Precondition: table is a table of numbers with a header.  In other words,
    (1) table is a nested 2D list in row-major order, (2) the first row only
    contains strings (the headers) (3) each row after the first contains only
    numbers, and (4) each row is the same length.
    """
    table[0].append('Sum')
    for i in range(1,len(table)):
        table[i].append(sum(table[i]))
    pass

-------------------

"""
Immutable (accumulator) functions on a 2d list of numbers.

This version of the module shows off completed functions.

Author: Walker M. White
Date:   June 7, 2019
"""


def all_nums(table):
    """
    Returns True if table contains only numbers (False otherwise)
    
    Example: all_nums([[1,2],[3,4]]) is True
    all_nums([[1,2],[3,'a']]) is False
    
    Parameter table: The candidate table to modify
    Preconditions: table is a rectangular 2d List
    """
    result = True
    
    # Walk through table
    for row in table:
    
        # Walk through the row
        for item in row:
            if not type(item) in [int,float]:
                result = False
    
    return result


def transpose(table):
    """
    Returns a copy of table with rows and columns swapped
    
    Example:
           1  2          1  3  5
           3  4    =>    2  4  6
           5  6
    
    Parameter table: the table to transpose
    Precondition: table is a rectangular 2d List of numbers
    """
    # Find the size of the (non-ragged) table
    numrows = len(table)
    numcols = len(table[0]) # All rows have same no. cols
    
    # Build the table
    result = [] # Result accumulator
    for m in range(numcols):
        
        # Make a single row
        row = [] # Single row accumulator
        for n in range(numrows):
            row.append(table[n][m])
        
        #Add the result to the table
        result.append(row)
    
    return result
