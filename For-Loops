"""
Module with simple for-loop functions.

Author: Isabella White
Date: 10/15/22
"""


def lesser(tup,value):
    """
    Returns the number of elements in tup strictly less than value
    
    Examples: 
        lesser((5, 9, 1, 7), 6) returns 2
        lesser((1, 2, 3), -1) returns 0
    
    Parameter tup: the tuple to check
    Precondition: tup is a non-empty tuple of ints
    
    Parameter value:  the value to compare to the tuple
    Precondition:  value is an int
    """
    count = 0
    for i in tup:
        if i < value:
            count = count+1
    return count
    pass


def avg(tup):
    """
    Returns average of all of the elements in the tuple.
    
    Remember that the average of a tuple is the sum of all of the elements in the
    tuple divided by the number of elements in the tuple.
    
    Examples: 
        avg((1.0, 2.0, 3.0)) returns 2.0
        avg((1.0, 1.0, 3.0, 5.0)) returns 2.5
    
    Parameter tup: the tuple to check
    Precondition: tup is a tuple of numbers (int or float)
    """
    result = counter = 0
    for x in tup:
        result += x
        counter += 1
    return 0.0 if not tup else result/counter
    pass

---------------------

"""
Module with more complex for-loop functions.

All of these functions make use of accumulators that make new tuples.

Author: Isabella White
Date: 10/15/22
"""


def clamp(tup,min,max):
    """
    Returns a copy of tup where every element is between min and max.
    
    Any number in the tuple less than min is replaced with min.  Any number
    in the tuple greater than max is replaced with max. Any number between
    min and max is left unchanged.
    
    Examples:
        clamp((-1, 1, 3, 5),0,4) returns (0,1,3,4)
        clamp((-1, 1, 3, 5),-2,8) returns (-1,1,3,5)
        clamp((-1, 1, 3, 5),-2,-1) returns (-1,-1,-1,-1)
        clamp((),0,4) returns ()
    
    Parameter tup: the tuple to copy
    Precondition: tup is a tuple of numbers (float or int)
    
    Parameter min: the minimum value for the tuple
    Precondition: min <= max is a number
    
    Parameter max: the maximum value for the tuple
    Precondition: max >= min is a number
    """
    result = ()
    for x in tup:
        if x <= min: 
            x = min
        elif x >= max: 
            x = max
        elif max < x < min:
            x = x
        result = result + (x,)
    return result
    
    pass


def uniques(tup):
    """
    Returns the number of unique elements in the tuple. 
    
    Examplse: 
        uniques((5, 9, 5, 7)) returns 3
        uniques((5, 5, 1, 'a', 5, 'a')) returns 3
        uniques(()) returns 0
    
    Parameter tup: the tuple to copy
    Precondition: tup is a tuple
    """
    x = []
    for a in tup:
        if a not in x:
            x.append(a)
    return len(x)
    pass

------------------------

"""
Module with range-based for-loop functions.

Author: Isabella White
Date: 10/15/22
"""

def factorial(n):
    """
    Returns n! = n * (n-1) * (n-2) ... * 1
    
    0! is 1.  Factorial is undefined for integers < 0.
    
    Examples:
        factorial(0) returns 1
        factorial(2) returns 2
        factorial(3) returns 6
        factorial(5) returns 120
    
    Parameter n: The integer for the factorial
    Precondition: n is an int >= 0
    """
    result =1
    if n == 0:
        result = 1
    for x in range(n+1):
        if x>1:
            result = result * (x)

    return result
    pass


def revrange(a,b):
    """
    Returns the tuple (b-1, b-2, ..., a)
    
    Note that this tuple is the reverse of tuple(range(a,b))
    
    Parameter a: the "start" of the range
    Precondition: a is an int <= b
    
    Parameter b: the "end" of the range
    Precondition: b is an int >= a
    """
    result = ()
    for x in range(a,b):
        result = (x,) + result

    return result
    pass

-------------------------------

"""
Module with for-loops that loop over positions.

Author: Isabella White
Date: 10/15/22
"""
import introcs

def skip(s,n):
    """
    Returns a copy of s, only including positions that are multiples of n
    
    A position is a multiple of n if pos % n == 0.
    
    Examples:
        skip('hello world',1) returns 'hello world'
        skip('hello world',2) returns 'hlowrd'
        skip('hello world',3) returns 'hlwl'
        skip('hello world',4) returns 'hor'
    
    Parameter s: the string to copy
    Precondition: s is a nonempty string
    
    Parameter n: the letter positions to accept
    Precondition: n is an int > 0
    """
    first = ""
    second = ""

    for pos in range(len(s)):
        if pos % n == 0:
            first = first + s[pos]
        else:
            second = second + s[pos]
    return first


def fixed_points(tup):
    """
    Returns a copy of tup, including only the "fixed points".
    
    A fixed point of a tuple is an element that is equal to its position in the tuple.
    For example 0 and 2 are fixed points of (0,3,2).  The fixed points are returned in
    the order that they appear in the tuple.
    
    Examples:
        fixed_points((0,3,2)) returns (0,2)
        fixed_points((0,1,2)) returns (0,1,2)
        fixed_points((2,1,0)) returns (1,)
    
    Parameter tup: the tuple to copy
    Precondition: tup is a tuple of ints
    """
    
    first = ()
    second = ()
    for pos in range(len(tup)):
        if pos == tup[pos]:
            first = first + (tup[pos],)
        else:
            second = second + (tup[pos],)
    return first
    
    pass
